/*
 * generated by Xtext 2.10.0
 */
package org.example.domainmodel.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.example.domainmodel.domainmodel.Domainmodel
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(DomainmodelInjectorProvider)
class DomainmodelParsingTest{

	@Inject extension ParseHelper<Domainmodel>
    @Inject extension ValidationTestHelper

	@Test 
	def void empty() {
		val result = '''
			entity foo {}
		'''.parse
		Assert.assertNotNull(result)
		result.assertNoErrors
	}

    @Test
    def void example() {
        val result = '''
            import java.util.List
             
            package my.model {
             
                entity Person {
                    name: String
                    firstName: String
                    friends: List<Person>
                    address : Address
                    op getFullName() : String {
                        return firstName + " " + name;
                    }
                    
                    op getFriendsSortedByFullName() : List<Person> {
                        return friends.sortBy[ f | f.fullName ]
                    }
                }
                
                entity Address {
                    street: String
                    zip: String
                    city: String
                }
            }
         '''.parse
         result.assertNoErrors
    }

    @Test
    def void loop() {
        val result = '''
            import java.util.List
             
            package my.model {
             
                entity Person {
                    name: String
                    friends: List<Person>
                    op findFriend(Person name) : Person {
                        for (var int i = 0; i < friends.size; i++) {
                            val friend = friends.get(i)
                            if (friend.name == name) {
                                return friend
                            }
                        }
                        return null
                    }
                }
            }
         '''.parse
         result.assertNoErrors
    }
}
